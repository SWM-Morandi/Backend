plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.13'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'swm_nm'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //logstash
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'


    //sentry

    implementation group: 'io.sentry', name: 'sentry-logback', version: '6.27.0'
    implementation 'io.sentry:sentry-spring-boot-starter:6.27.0'

    //spring security

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    if ( System.getProperty("os.name") == "Mac OS X" && System.getProperty("os.arch") == "aarch64") {
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.94.Final:osx-aarch_64")
    }

    implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
}

tasks.named('test') {
    useJUnitPlatform()
}
